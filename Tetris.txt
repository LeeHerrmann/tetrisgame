#include <iostream>
using namespace std;

const int width = 10;
const int height = 20;
int field[height][width];
int tetromino[4][4];
int tetrominoColors[7] = {1, 2, 3, 4, 5, 6, 7};
int x, y;
bool gameover;
int score = 0;
int dropDistance;

int getRandomTetromino() { return rand() % 8; }

void InitTetromino(int type) {
  int tetrominos[8][4][4] = {
      {{1, 1, 1, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},

      {{1, 1, 1, 0}, {1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},

      {{1, 1, 1, 0}, {0, 0, 1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},

      {{1, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},

      {{0, 1, 1, 0}, {1, 1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},

      {{1, 1, 0, 0}, {1, 1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},

      {{1, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}},

      {{1, 1, 1, 0}, {0, 1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}};

  for (int i = 0; i < 4; ++i) {
    for (int j = 0; j < 4; ++j) {
      tetromino[i][j] = tetrominos[type][i][j];
    }
  }
}

void MergeTetromino() {
  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 4; j++)
      if (tetromino[i][j] != 0)
        field[y + i][x + j] = tetromino[i][j];
}

void Draw() {
  system("clear");

  for (int i = 0; i < width + 2; i++)
    cout << "#";
  cout << endl;

  for (int i = 0; i < height; i++) {
    for (int j = 0; j < width; j++) {
      if (j == 0)
        cout << "#";

      if (field[i][j] == 0) {
        if ((i >= y && i < y + 4) && (j >= x && j < x + 4) &&
            tetromino[i - y][j - x] != 0)
          cout << "O";
        else
          cout << " ";
      } else {
        int color = field[i][j];
        cout << tetrominoColors[color - 1];
      }

      if (j == width - 1)
        cout << "#";
    }
    cout << endl;
  }

  for (int i = 0; i < width + 2; i++)
    cout << "#";
  cout << endl;

  cout << "Score: " << score << endl;
}

bool CheckCollision(int newX, int newY) {
  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 4; j++) {
      int x = newX + j;
      int y = newY + i;

      if (x >= 0 && x < width && y < height) {
        if (field[y][x] != 0 && tetromino[i][j] != 0)
          return true;
      } else {
        if (tetromino[i][j] != 0)
          return true;
      }
    }

  return false;
}

void RotateTetromino() {
  int temp[4][4];
  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 4; j++)
      temp[i][j] = tetromino[i][j];

  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 4; j++)
      tetromino[i][j] = temp[3 - j][i];
}

void MoveTetrominoLeft() {
  if (!CheckCollision(x - 1, y)) {
    x--;
  }
}
void MoveTetrominoRight() {
  if (!CheckCollision(x + 1, y)) {
    x++;
  }
}

void MoveTetrominoDown() {
  if (!CheckCollision(x, y + 1)) {
    y++;
  } else {
    MergeTetromino();
    for (int i = height - 1; i >= 0; i--) {
      bool rowFilled = true;
      for (int j = 0; j < width; j++) {
        if (field[i][j] == 0) {
          rowFilled = false;
          break;
        }
      }
      if (rowFilled) {
        for (int k = i; k > 0; k--) {
          for (int j = 0; j < width; j++) {
            field[k][j] = field[k - 1][j];
          }
        }
        for (int j = 0; j < width; j++) {
          field[0][j] = 0;
        }
        i++;
        score += 10;
      }
    }

    InitTetromino(getRandomTetromino());
    x = width / 2 - 2;
    y = 0;
    if (CheckCollision(x, y)) {
      gameover = true;
    }
  }
}

void AutoMoveDown(int level) {
  if (!CheckCollision(x, y + 1)) {
    y++;
  } else {
    MergeTetromino();
    for (int i = height - 1; i >= 0; i--) {
      bool rowFilled = true;
      for (int j = 0; j < width; j++) {
        if (field[i][j] == 0) {
          rowFilled = false;
          break;
        }
      }
      if (rowFilled) {
        for (int k = i; k > 0; k--) {
          for (int j = 0; j < width; j++) {
            field[k][j] = field[k - 1][j];
          }
        }
        for (int j = 0; j < width; j++) {
          field[0][j] = 0;
        }
        i++;
        score += 10;
      }
    }

    InitTetromino(getRandomTetromino());
    x = width / 2 - 2;
    y = 0;
    if (CheckCollision(x, y)) {
      gameover = true;
    }
  }
}

int ShowMenuAndGetLevel() {
  cout << "ТЕТРИС! Цель игры набрать 50 очков" << endl;
  cout << "Выберите уровень сложности:" << endl;
  cout << "1. Пионер" << endl;
  cout << "2. Комсомолец" << endl;
  int level;
  cin >> level;
  return level;
}

void Update(int level) {
  char input;
  cin >> input;
  switch (input) {
  case 'a':
    MoveTetrominoLeft();
    break;
  case 'd':
    MoveTetrominoRight();
    break;
  case 'r':
    RotateTetromino();
    break;
  case 's':
    if (level == 1) {
      AutoMoveDown(level);
    }
    break;
  default:
    break;
  }
}

int main() {
  int finalscore;
  srand(time(0));
  int level = ShowMenuAndGetLevel();
  if (level == 1) {
    finalscore = 50;
  } else if (level == 2) {
    finalscore = 100;
  }
  gameover = false;
  int type = getRandomTetromino();
  InitTetromino(type);
  x = width / 2 - 2;
  y = 0;
  while (!gameover && score < finalscore) {
    Draw();
    Update(level);
    if (level == 2) {
      MoveTetrominoDown();
    }
  }
  if (score >= 50) {
    cout << "Поздравляем, вы выиграли! Партия гордится вами и выдаёт вам новый "
            "Т72, теперь вы настоящий коммунист!"
         << endl;
  } else {
    cout << "Game Over!" << endl;
  }

  return 0;
}
